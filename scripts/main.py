# scripts/main.py

from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô setup
DB_PATH = "chroma_db_langchain"
MODEL_NAME = "Qwen/Qwen3-Embedding-8B" # ‡∏´‡∏£‡∏∑‡∏≠ 'intfloat/multilingual-e5-large'

def main():
    # 1. Load Embeddings Modelz
    print("ü§ñ Loading embedding model...")
    embeddings = HuggingFaceEmbeddings(model_name=MODEL_NAME)

    # 2. Load Existing Vector Store
    # ‡πÇ‡∏´‡∏•‡∏î DB ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå setup
    print(f"üìÇ Loading vector store from: {DB_PATH}")
    vector_store = Chroma(
        persist_directory=DB_PATH,
        embedding_function=embeddings
    )

    print("\n‚úÖ Ready to search!")

    while True:
        keyword = input("\nEnter your search keyword (or 'q' to quit): ")
        if keyword.lower() == 'q':
            break

        if not keyword.strip():
            continue

        print(f"\nüîç Searching for '{keyword}'...")

        # 3. Perform Search
        # ‡πÉ‡∏ä‡πâ similarity_search_with_score ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á (Document, score)
        results_with_scores = vector_store.similarity_search_with_score(
            keyword,
            k=3 # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        )

        if not results_with_scores:
            print("No matching results found.")
        else:
            print(f"Found {len(results_with_scores)} results:\n")
            for i, (doc, score) in enumerate(results_with_scores):
                print(f"--- Result {i+1} ---")
                # score ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LangChain ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chroma ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô cosine distance
                # ‡∏Ñ‡πà‡∏≤‡∏¢‡∏¥‡πà‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô
                print(f"‚úÖ File: {doc.metadata.get('source', 'N/A')}")
                print(f"üìä Score (Distance): {score:.4f}")
        print("-" * 40 + "\n")

if __name__ == "__main__":
    main()
