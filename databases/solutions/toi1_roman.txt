#include <iostream> // For input/output operations (cin, cout)

int main() {
    // Optimize C++ standard streams for competitive programming.
    // This unties cin from cout and prevents synchronization with C's stdio.
    std::cin.tie(nullptr)->sync_with_stdio(false);

    int limit;
    std::cin >> limit; // Read the upper limit 'a' (renamed to 'limit' for clarity)

    // Initialize counts for each Roman numeral character.
    // I: 1, V: 5, X: 10, L: 50, C: 100
    int count_I = 0;
    int count_V = 0;
    int count_X = 0;
    int count_L = 0;
    int count_C = 0;

    // This loop iterates from the given 'limit' down to 1.
    // The variable 'b' (renamed to 'current_number') holds the number
    // for which Roman numeral characters are currently being counted.
    for (int i = 0; i < limit; ++i) {
        // Calculate the current number to convert.
        // If limit is 5, i will be 0, 1, 2, 3, 4.
        // current_number will be 5, 4, 3, 2, 1.
        int current_number = (limit - i);

        // Convert 'current_number' into its Roman numeral components
        // and add to the respective counts.
        // This process essentially "peels off" the largest possible Roman numeral
        // values from 'current_number' until it becomes 0.

        // Handle C (100) and special case XC (90)
        if (current_number >= 100) {
            count_C += (current_number / 100);
            current_number %= 100;
        }
        if (current_number >= 90) { // Special case: XC (90)
            count_C += 1;
            count_X += 1;
            current_number -= 90;
        }

        // Handle L (50) and special case XL (40)
        if (current_number >= 50) {
            count_L += (current_number / 50);
            current_number %= 50;
        }
        if (current_number >= 40) { // Special case: XL (40)
            count_L += 1;
            count_X += 1;
            current_number -= 40;
        }

        // Handle X (10) and special case IX (9)
        if (current_number >= 10) {
            count_X += (current_number / 10);
            current_number %= 10;
        }
        if (current_number >= 9) { // Special case: IX (9)
            count_X += 1;
            count_I += 1;
            current_number -= 9;
        }

        // Handle V (5) and special case IV (4)
        if (current_number >= 5) {
            count_V += (current_number / 5);
            current_number %= 5;
        }
        if (current_number >= 4) { // Special case: IV (4)
            count_V += 1;
            count_I += 1;
            current_number -= 4;
        }

        // Handle I (1)
        if (current_number >= 1) {
            count_I += (current_number / 1);
            // current_number %= 1; // This line is technically correct but redundant as current_number will become 0
        }
    }

    // Print the total counts of each Roman numeral character, separated by spaces.
    std::cout << count_I << ' ' << count_V << ' ' << count_X << ' ' << count_L << ' ' << count_C << std::endl;

    return 0; // Indicate successful program termination
}