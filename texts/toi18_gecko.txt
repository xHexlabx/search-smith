The 18th National Computer Olympiad examination at Chiang Mai University includes Problem 3 out of 3, held on Friday, June 3, 2565 BE (2022 CE), from 09:00 to 12:00.

The problem is titled "Gecko".

"Jak-gim" is the Northern Thai dialect word for gecko. Geckos (genus *Hemidactylus*) are reptiles whose diet consists of various insects and bugs, especially their favorite food, "kung" (spiders). It is believed that dreaming of a gecko or a gecko speaking to you brings good news or fortune.

Geckos dislike strong smells and tend to avoid people. However, if they encounter their favorite food, "kung", they will quickly climb down the wall to eat it. Geckos living in "Ruean Kalae" (traditional Northern Thai houses with distinct architectural features) often have walls made of "fa lai" (two layers of wooden panels with alternating gaps). When the panels are slid together, the wall is solid. But if the inner panels are moved, gaps appear, allowing light and wind to pass through, similar to modern sliding doors and windows. When multiple geckos want to climb down the wall to eat the same "kung", they must plan their descent efficiently because "kung" are fast. Due to the structure of "fa lai" walls, geckos primarily climb down vertically along the wall panels. Horizontal wooden beams may be present between wall panels, which geckos can climb across to reach other panels.

**Rules for Gecko Wall Climbing to Eat "Kung":**
1.  There are N wall panels (vertical slats) in the "fa lai" wall, numbered from 0 to N-1 from left to right. [cite_start]All panels have the same height[cite: 3].
2.  [cite_start]The special wall panel number P has "kung" (spider) on the ground attached to it[cite: 3].
3.  [cite_start]There are M horizontal wooden beams (crossbeams)[cite: 3]. [cite_start]Each crossbeam connects two wall panels[cite: 3]. [cite_start]When a gecko climbs a crossbeam, it must start from one end and climb all the way to the other end before it can continue climbing down the wall[cite: 3].
4.  [cite_start]Each crossbeam has a strong smell that geckos dislike[cite: 3]. [cite_start]When a gecko climbs across it, it must hold its breath, considering it a difficult passage[cite: 3]. [cite_start]Each crossbeam has a specified smell intensity level[cite: 3].
5.  [cite_start]There are K geckos[cite: 3]. [cite_start]Initially, each gecko is at the top of a wall panel, denoted by $G_k$ (for $k=1,...,K$)[cite: 3]. [cite_start]All $G_k$ are unique, and no gecko starts at wall panel P[cite: 3].
6.  Gecko climbing rules:
    6.1. [cite_start]If a gecko reaches wall panel P (the same panel as the "kung"), it will immediately climb down to the base of that panel, ignoring all crossbeams[cite: 3].
    6.2. [cite_start]If a gecko is not at wall panel P, it will climb down the wall panel (geckos never climb up)[cite: 3]. [cite_start]If there is a crossbeam connecting the current wall panel that is below the gecko, the gecko will choose the lowest crossbeam whose end is attached to that panel and climb along that crossbeam to its other end, which is attached to another wall panel[cite: 3]. [cite_start]It will then repeat this process until it reaches the ground[cite: 3].

Figure 1 illustrates an example of 2 geckos climbing down. A gecko starting at wall panel 0 will pass the lowest crossbeam to wall panel 4, then the lowest crossbeam to wall panel 5 before reaching the ground. [cite_start]A gecko starting at wall panel 3 will pass the lowest crossbeam to wall panel 5, climb down, then encounter another crossbeam to wall panel 4. The gecko must climb to wall panel 4 and then descend to the ground[cite: 4].

[cite_start]We can remove crossbeams or change their heights while ensuring that geckos can still reach the "kung"[cite: 4]. [cite_start]From the start and after changing crossbeam heights, no two crossbeams will be at the same height, and no crossbeam will have both ends at the same position[cite: 4]. [cite_start]We want all K geckos to reach the ground at wall panel P, and each gecko must have the minimum total smell intensity from all crossbeams it traverses[cite: 4].

[cite_start]The problem asks to determine which crossbeams remain after removal and how their heights are changed (output the remaining crossbeams from highest to lowest)[cite: 4].

**Example:**
As shown in Figure 2, there are 6 wall panels. There are 3 geckos at the top of wall panels 0, 2, and 3. All three geckos want to eat the "kung" at the base of wall panel 4. There are 8 crossbeams:
* [cite_start]Crossbeam 1: connects panels 0 and 1, smell intensity 7[cite: 4].
* [cite_start]Crossbeam 2: connects panels 0 and 4, smell intensity 20[cite: 4].
* [cite_start]Crossbeam 3: connects panels 1 and 3, smell intensity 1[cite: 4].
* [cite_start]Crossbeam 4: connects panels 1 and 5, smell intensity 8[cite: 4].
* [cite_start]Crossbeam 5: connects panels 1 and 2, smell intensity 3[cite: 4].
* [cite_start]Crossbeam 6: connects panels 2 and 4, smell intensity 63[cite: 5].
* [cite_start]Crossbeam 7: connects panels 3 and 5, smell intensity 4[cite: 5].
* [cite_start]Crossbeam 8: connects panels 4 and 5, smell intensity 3[cite: 5].
[cite_start]The initial heights of the crossbeams are different, as shown in Figure 2[cite: 5].

[cite_start]From Figure 2, the gecko at wall panel 0 will climb to eat the "kung" with a total smell intensity of 20[cite: 6]. [cite_start]The gecko at wall panel 2 cannot climb to eat the "kung"[cite: 6]. [cite_start]The gecko at wall panel 3 will climb to eat the "kung" with a total smell intensity of 7[cite: 6]. [cite_start]However, if some crossbeams are removed and the heights of the remaining ones are changed as shown in Figure 3, all 3 geckos can reach the ground at wall panel 4[cite: 6]. [cite_start]The total smell intensity for each gecko, from left to right, will be 15, 11, and 7 respectively, which are the minimum possible values for each gecko[cite: 6].

**Your Task:**
Write an efficient program that, given the number of wall panels (N), number of crossbeams (M), number of geckos (K), the wall panel position where the "kung" is located (P), the starting wall panel positions of each gecko, and information about each crossbeam (the pair of wall panels it connects and its smell intensity, sorted from highest to lowest), determines the minimum total smell intensity for each gecko after removing some crossbeams and rearranging the remaining ones. Then, your program should output:
1.  [cite_start]The total smell intensity for each gecko, in the order of their starting wall panel positions[cite: 7].
2.  [cite_start]The number of remaining crossbeams[cite: 7].
3.  [cite_start]The remaining crossbeams (which ones are left), ordered from highest to lowest[cite: 7].

**Input:**
The input consists of $M+2$ lines:
* [cite_start]Line 1: Four integers N, M, K, and P, separated by spaces[cite: 8].
    * [cite_start]N: number of wall panels, $1 \le N \le 20,000$[cite: 8].
    * [cite_start]M: number of crossbeams, $1 \le M \le 200,000$[cite: 8].
    * [cite_start]K: number of geckos, $1 \le K \le N-1$[cite: 8].
    * [cite_start]P: wall panel position where the "kung" is located, $0 \le P \le N-1$[cite: 8].
* [cite_start]Line 2: K integers $G_k$, separated by spaces[cite: 8].
    * [cite_start]$G_k$: starting wall panel number for the $k$-th gecko, $0 \le G_k < N$ (for $k=1,...,K$) and $G_k \ne P$[cite: 8].
* [cite_start]Lines $i+2$ (for $i=1$ to M): Each line contains three integers $a_i$, $b_i$, and $w_i$ (for $i=1,...,M$), separated by spaces[cite: 8].
    * [cite_start]$a_i$ and $b_i$: endpoints of the $i$-th crossbeam, connecting wall panels $a_i$ and $b_i$[cite: 8].
    * [cite_start]Constraints: $0 \le a_i < b_i \le N-1$, and no duplicate $(a_i, b_i)$ pairs[cite: 8].
    * [cite_start]$w_i$: smell intensity of the $i$-th crossbeam, $0 < w_i \le 100,000$[cite: 8].
    * [cite_start]The input data for crossbeams is ordered from the topmost to the bottommost[cite: 8].

**Output:**
The output consists of Q+2 lines:
* [cite_start]Line 1: K integers $S_i$ (for $i=1,...,K$), separated by spaces, representing the total smell intensity for the $i$-th gecko[cite: 11].
* [cite_start]Line 2: Q, representing the number of remaining crossbeams[cite: 11].
* [cite_start]Lines 3 to Q+2: Each line contains two integers $\overline{a}_l$ and $\overline{b}_l$ (for $l=1,...,Q$), separated by spaces, representing the endpoints of the $l$-th remaining crossbeam, ordered from topmost to bottommost[cite: 11].

**Note:**
[cite_start]For each input, there can be multiple correct outputs[cite: 12]. [cite_start]The contestant's program can output any valid correct format[cite: 12]. [cite_start]It is guaranteed that there will always be a way for geckos to reach the "kung"[cite: 12].

**Example 1 Input/Output:**
Input:
6 8 3 4
0 2 3
0 1 7
1 3 1
1 5 8
0 4 20
2 4 63
3 5 4
4 5 3
1 2 3
Output (Format 1):
15 11 7
5
1 2
0 1
1 3
3 5
4 5
Output (Format 2):
15 11 7
5
0 1
1 2
1 3
3 5
4 5

**Example 2 Input/Output:**
Input:
3 3 2 1
2 0
0 1 3
1 2 2
0 2 10
Output (Format 1):
2 3
2
0 1
1 2
Output (Format 2):
2 3
2
0 1
1 2

**Example 3 Input/Output:**
Input:
4 5 2 1
0 3
0 1 8
0 2 4
2 3 3
1 2 2
1 3 6
Output (Format 1):
6 5
3
2 3
0 2
1 2
Output (Format 2):
6 5
3
0 2
2 3
1 2

**Constraints:**
* [cite_start]Input: Standard Input (keyboard) [cite: 21]
* [cite_start]Output: Standard Output (screen) [cite: 21]
* [cite_start]Maximum processing time: 1 second [cite: 21]
* [cite_start]Maximum memory usage: 1024MB [cite: 21]
* [cite_start]Maximum score for the problem: 100 points [cite: 21]
* [cite_start]Program execution condition: The program must compile successfully[cite: 21].

**Additional Information about Test Cases:**
| Group Test Case | Max Score for this group | Condition |
|---|---|---|
| 1 | 17 | [cite_start]$K < N \le 10$ and $M \le 10$ [cite: 23] |
| 2 | 4 | $K=1$ and $w_i=1$ (for $i=1,...,M$). [cite_start]Guaranteed that a solution exists without rearranging crossbeams[cite: 23]. |
| 3 | 6 | $w_i=1$ (for $i=1,...,M$). [cite_start]Guaranteed that a solution exists without rearranging crossbeams[cite: 23]. |
| 4 | 9 | $K=1$. [cite_start]Guaranteed that a solution exists without rearranging crossbeams[cite: 23]. |
| 5 | 12 | [cite_start]Guaranteed that a solution exists without rearranging crossbeams[cite: 23]. |
| 6 | 11 | [cite_start]$w_i=1$ (for $i=1,...,M$)[cite: 23]. |
| 7 | 41 | [cite_start]No other conditions[cite: 23]. |

**Programming Recommendations:**
If using `cin`/`cout`, it is recommended to add the following two lines:
```cpp
std::ios_base::sync_with_stdio(false);
std::cin.tie(NULL);
```