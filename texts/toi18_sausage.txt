The 18th National Computer Olympiad examination at Chiang Mai University includes Problem 2 out of 3, held on Friday, June 3, 2565 BE (2022 CE), from 09:00 to 12:00.

The problem is titled "Sai-ua" (Sweet Bean Sausage).

Sai-ua (Sweet Bean Sausage) is a special type of spherical sweet bean sausage. Each piece is arranged in a long string. There are N pieces of Sai-ua, and each piece has its own deliciousness value, $D_i$ for the $i$-th piece. To eat Sai-ua, all pieces must be eaten, one at a time, by choosing only the first piece or the last piece of the string. For example, as shown in Figure 1, if there are 4 pieces, you can choose to eat piece 1 or piece 4, but not piece 2 or piece 3.

[cite_start]Figure 1: Initial 4 pieces of Sai-ua arranged in a long string. [cite: 2]

[cite_start]In each eating step, the deliciousness of the chosen piece ($D_C$) and the deliciousness of the piece at the other end of the string (the one not chosen, $D_N$) combine to form a "divine deliciousness" value, which is $|D_C - D_N|$. [cite: 2] [cite_start]This divine deliciousness adds to the total deliciousness for the *next* eating step. [cite: 2] In other words:

[cite_start]Deliciousness for each eating step = Deliciousness of the chosen Sai-ua piece + Divine deliciousness from the previous step. [cite: 2]

**Example 1:**
[cite_start]From Figure 1, the Sai-ua pieces have deliciousness values 1, 2, 3, and 6, respectively. [cite: 2] [cite_start]In the first eating step, you can choose piece 1 or piece 4. [cite: 2] [cite_start]If you start by choosing piece 4, which has a deliciousness value of 6, the divine deliciousness will be $|6-1|=5$. [cite: 2] [cite_start]This value of 5 is the divine deliciousness for the next eating step. [cite: 2] [cite_start]For the first eating step, there is no prior divine deliciousness, so its value is 0. [cite: 2] [cite_start]Therefore, the deliciousness for the first eating step is $6+0=6$. [cite: 2] [cite_start]Pieces 1, 2, and 3 remain uneaten, as shown in Figure 2. [cite: 2]

[cite_start]Figure 2: Sai-ua after the first eating step. [cite: 3]

[cite_start]From Figure 2, in the second eating step, you can choose piece 1 or piece 3. [cite: 3] [cite_start]If you choose piece 1, which has a deliciousness value of 1, the divine deliciousness will be $|1-3|=2$. [cite: 3] [cite_start]This value of 2 is the divine deliciousness for the next eating step. [cite: 3] [cite_start]Therefore, the deliciousness for this second eating step is $1+5=6$. [cite: 3] [cite_start]Pieces 2 and 3 remain uneaten. [cite: 3]

Different sequences of choosing Sai-ua pieces to eat all N pieces can result in different total deliciousness values. [cite_start]See Examples 2 and 3. [cite: 3]

**Example 2:**
[cite_start]Given 4 Sai-ua pieces with deliciousness values 1, 2, 3, and 6, respectively, consider the following eating sequence: [cite: 4]

| Step | Chosen Piece | Remaining Sai-ua | Deliciousness for this step | Divine Deliciousness |
|---|---|---|---|---|
| Initial | - | 6 1 2 3 | 0 | 0 |
| 1 | 4 (value 6) | 1 2 3 | $6+0=6$ | $|6-1|=5$ |
| 2 | 3 (value 3) | 1 2 | $3+5=8$ | $|3-1|=2$ |
| 3 | 2 (value 2) | 1 | $2+2=4$ | $|2-1|=1$ |
| 4 | 1 (value 1) | 0 | $1+1=2$ | $|1-1|=0$ |

[cite_start]From the table above, the total deliciousness for eating the Sai-ua is $6+8+4+2=20$. [cite: 5]

**Example 3:**
[cite_start]Given 4 Sai-ua pieces with deliciousness values 1, 2, 3, and 6, respectively (same as Example 2), but with a different eating sequence: [cite: 6, 7]

| Step | Chosen Piece | Remaining Sai-ua | Deliciousness for this step | Divine Deliciousness |
|---|---|---|---|---|
| Initial | - | 1 2 3 6 | 0 | 0 |
| 1 | 1 (value 1) | 2 3 6 | $1+0=1$ | $|1-6|=5$ |
| 2 | 4 (value 6) | 2 3 | $6+5=11$ | $|6-2|=4$ |
| 3 | 3 (value 3) | 2 | $3+4=7$ | $|3-2|=1$ |
| 4 | 2 (value 2) | 0 | $2+1=3$ | $|2-2|=0$ |

[cite_start]From the table, the total deliciousness for eating the Sai-ua is $1+11+7+3=22$. [cite: 8] [cite_start]This sequence yields a higher total deliciousness than Example 2. [cite: 8]

[cite_start]To further increase the deliciousness, before starting to eat the Sai-ua as described above, you can cut the string into multiple smaller strings, as shown in Figure 3. [cite: 8] [cite_start]If the Sai-ua is cut into 2 strings, the maximum total deliciousness will increase. [cite: 8] However, there are additional rules for eating cut Sai-ua:
1.  [cite_start]You must finish eating all pieces in one string before starting to eat a new string. [cite: 8]
2.  [cite_start]When starting to eat a new string, the divine deliciousness always resets to zero. [cite: 8]

[cite_start]Figure 3: Example of cutting Sai-ua to increase deliciousness. [cite: 9]

[cite_start]Considering Figure 3, if the Sai-ua string is not cut before eating, the maximum total deliciousness is 674. [cite: 9] [cite_start]However, if the string is cut into 2 pieces, the maximum total deliciousness becomes $324+352=676$. [cite: 9]

**Your Task:**
[cite_start]Write an efficient program to find the maximum possible total deliciousness from eating Sai-ua. [cite: 9]

**Input:**
[cite_start]The input consists of 2 lines: [cite: 10]
* [cite_start]Line 1: A single positive integer N, representing the total number of Sai-ua pieces. [cite: 10]
    * [cite_start]Constraint: $5 \le N \le 5,000$. [cite: 10]
* Line 2: N integers, separated by single spaces. [cite_start]Each integer $D_i$ represents the deliciousness value of Sai-ua piece $i$. [cite: 10]
    * [cite_start]Constraints: $1 \le D_i \le 20,000$ and $1 \le i \le N$. [cite: 10]

**Output:**
[cite_start]The output consists of a single line containing a single integer, representing the maximum total deliciousness from eating Sai-ua. [cite: 11]

**Example Input/Output:**
[cite_start]**Example 1** [cite: 13]
Input:
7
1 6 1 6 3 3 5
Output:
153

[cite_start]**Example 2** [cite: 13]
Input:
6
16 4 30 20 21 7
Output:
171

[cite_start]**Example 3** [cite: 13]
Input:
8
15 5 8 10 10 3 11 10
Output:
120

[cite_start]**Example 4** [cite: 13]
Input:
5
58 5 2 1 11
Output:
52

[cite_start]**Constraints:** [cite: 15]
* [cite_start]Input: Standard Input (keyboard) [cite: 15]
* [cite_start]Output: Standard Output (screen) [cite: 15]
* [cite_start]Maximum processing time: 1 second [cite: 15]
* [cite_start]Maximum memory usage: 1024 MB [cite: 15]
* [cite_start]Maximum score for the problem: 100 points [cite: 15]
* [cite_start]Program execution condition: The program must compile successfully. [cite: 15]

[cite_start]**Additional Information about Test Cases:** [cite: 17]
| Group Test Case | Maximum Score for this group | Condition |
|---|---|---|
| 1 | 13 | [cite_start]$N \le 20$ [cite: 17] |
| 2 | 12 | $N \le 100$. [cite_start]Guaranteed that the solution does not involve cutting the Sai-ua. [cite: 17] |
| 3 | 13 | $N \le 100$. [cite_start]Guaranteed that the solution involves cutting the Sai-ua into no more than 4 pieces. [cite: 17] |
| 4 | 11 | [cite_start]$N \le 500$. [cite: 17] |
| 5 | 16 | $N \le 1,000$. [cite_start]Guaranteed that the solution involves cutting the Sai-ua into no more than 10 pieces. [cite: 17] |
| 6 | 35 | [cite_start]$N \le 5,000$. [cite: 17] |

[cite_start]**Programming Recommendations:** [cite: 19]
[cite_start]If using `cin`/`cout`, it is recommended to add the following two lines: [cite: 19]
```cpp
std::ios_base::sync_with_stdio(false);
std::cin.tie(NULL);
```